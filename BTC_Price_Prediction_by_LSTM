import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pandas_datareader import data as pdr
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import r2_score
import datetime
import tensorflow as tf
from datetime import timedelta
import mplfinance as mpf

from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
from sklearn.model_selection import TimeSeriesSplit
from sklearn.model_selection import cross_val_score, KFold
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from scipy.stats import sem
plt.style.use("fivethirtyeight")


%matplotlib inline

start= datetime.datetime(2020, 1, 1)
end=datetime.datetime(2021, 12, 31)

df=pdr.DataReader('BTC-JPY','yahoo',start,end)


# Close(終値)のデータ
data = df.filter(['Close'])
dataset = data.values

# データを0〜1の範囲に正規化
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

# 全体の80%をトレーニングデータとして扱う
training_data_len = int(np.ceil( len(dataset) * .8 ))

# どれくらいの期間をもとに予測するか
window_size = 30

train_data = scaled_data[0:int(training_data_len), :]

# train_dataをx_trainとy_trainに分ける
x_train, y_train = [], []
for i in range(window_size, len(train_data)):
    x_train.append(train_data[i-window_size:i, 0])
    y_train.append(train_data[i, 0])

# numpy arrayに変換
x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

#LSTMモデル構築
model = Sequential()
model.add(LSTM(units=50,return_sequences=True,input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=50,return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=50,return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=50))
model.add(Dropout(0.2))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')
history = model.fit(x_train, y_train, batch_size=32, epochs=350)


# テストデータを作成
test_data = scaled_data[training_data_len - window_size: , :]

x_test = []
y_test = dataset[training_data_len:, :]
for i in range(window_size, len(test_data)):
    x_test.append(test_data[i-window_size:i, 0])

# numpy arrayに変換
x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))
# 予測を実行する
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# 二乗平均平方根誤差（RMSE）
rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))
print('二乗平均平方根誤差（RMSE)：{}',format(rmse))

# 決定係数(r2) 
r2s = r2_score(y_test, predictions)
print('決定係数(r2):{}'.format(r2s))


train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

#グラフ描画
plt.figure(figsize=(16,6))
plt.title('LSTM Model')
plt.xlabel('Date', fontsize=14)
plt.ylabel('Close Price JPY', fontsize=14)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()
